(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=1)})([function(module,exports,__webpack_require__){(function(){"use strict";function polyfill(){var w=window;var d=document;if("scrollBehavior"in d.documentElement.style&&w.__forceSmoothScrollPolyfill__!==true){return}var Element=w.HTMLElement||w.Element;var SCROLL_TIME=468;var original={scroll:w.scroll||w.scrollTo,scrollBy:w.scrollBy,elementScroll:Element.prototype.scroll||scrollElement,scrollIntoView:Element.prototype.scrollIntoView};var now=w.performance&&w.performance.now?w.performance.now.bind(w.performance):Date.now;function isMicrosoftBrowser(userAgent){var userAgentPatterns=["MSIE ","Trident/","Edge/"];return new RegExp(userAgentPatterns.join("|")).test(userAgent)}var ROUNDING_TOLERANCE=isMicrosoftBrowser(w.navigator.userAgent)?1:0;function scrollElement(x,y){this.scrollLeft=x;this.scrollTop=y}function ease(k){return.5*(1-Math.cos(Math.PI*k))}function shouldBailOut(firstArg){if(firstArg===null||typeof firstArg!=="object"||firstArg.behavior===undefined||firstArg.behavior==="auto"||firstArg.behavior==="instant"){return true}if(typeof firstArg==="object"&&firstArg.behavior==="smooth"){return false}throw new TypeError("behavior member of ScrollOptions "+firstArg.behavior+" is not a valid value for enumeration ScrollBehavior.")}function hasScrollableSpace(el,axis){if(axis==="Y"){return el.clientHeight+ROUNDING_TOLERANCE<el.scrollHeight}if(axis==="X"){return el.clientWidth+ROUNDING_TOLERANCE<el.scrollWidth}}function canOverflow(el,axis){var overflowValue=w.getComputedStyle(el,null)["overflow"+axis];return overflowValue==="auto"||overflowValue==="scroll"}function isScrollable(el){var isScrollableY=hasScrollableSpace(el,"Y")&&canOverflow(el,"Y");var isScrollableX=hasScrollableSpace(el,"X")&&canOverflow(el,"X");return isScrollableY||isScrollableX}function findScrollableParent(el){while(el!==d.body&&isScrollable(el)===false){el=el.parentNode||el.host}return el}function step(context){var time=now();var value;var currentX;var currentY;var elapsed=(time-context.startTime)/SCROLL_TIME;elapsed=elapsed>1?1:elapsed;value=ease(elapsed);currentX=context.startX+(context.x-context.startX)*value;currentY=context.startY+(context.y-context.startY)*value;context.method.call(context.scrollable,currentX,currentY);if(currentX!==context.x||currentY!==context.y){w.requestAnimationFrame(step.bind(w,context))}}function smoothScroll(el,x,y){var scrollable;var startX;var startY;var method;var startTime=now();if(el===d.body){scrollable=w;startX=w.scrollX||w.pageXOffset;startY=w.scrollY||w.pageYOffset;method=original.scroll}else{scrollable=el;startX=el.scrollLeft;startY=el.scrollTop;method=scrollElement}step({scrollable:scrollable,method:method,startTime:startTime,startX:startX,startY:startY,x:x,y:y})}w.scroll=w.scrollTo=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){original.scroll.call(w,arguments[0].left!==undefined?arguments[0].left:typeof arguments[0]!=="object"?arguments[0]:w.scrollX||w.pageXOffset,arguments[0].top!==undefined?arguments[0].top:arguments[1]!==undefined?arguments[1]:w.scrollY||w.pageYOffset);return}smoothScroll.call(w,d.body,arguments[0].left!==undefined?~~arguments[0].left:w.scrollX||w.pageXOffset,arguments[0].top!==undefined?~~arguments[0].top:w.scrollY||w.pageYOffset)};w.scrollBy=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])){original.scrollBy.call(w,arguments[0].left!==undefined?arguments[0].left:typeof arguments[0]!=="object"?arguments[0]:0,arguments[0].top!==undefined?arguments[0].top:arguments[1]!==undefined?arguments[1]:0);return}smoothScroll.call(w,d.body,~~arguments[0].left+(w.scrollX||w.pageXOffset),~~arguments[0].top+(w.scrollY||w.pageYOffset))};Element.prototype.scroll=Element.prototype.scrollTo=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){if(typeof arguments[0]==="number"&&arguments[1]===undefined){throw new SyntaxError("Value could not be converted")}original.elementScroll.call(this,arguments[0].left!==undefined?~~arguments[0].left:typeof arguments[0]!=="object"?~~arguments[0]:this.scrollLeft,arguments[0].top!==undefined?~~arguments[0].top:arguments[1]!==undefined?~~arguments[1]:this.scrollTop);return}var left=arguments[0].left;var top=arguments[0].top;smoothScroll.call(this,this,typeof left==="undefined"?this.scrollLeft:~~left,typeof top==="undefined"?this.scrollTop:~~top)};Element.prototype.scrollBy=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){original.elementScroll.call(this,arguments[0].left!==undefined?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,arguments[0].top!==undefined?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop);return}this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior})};Element.prototype.scrollIntoView=function(){if(shouldBailOut(arguments[0])===true){original.scrollIntoView.call(this,arguments[0]===undefined?true:arguments[0]);return}var scrollableParent=findScrollableParent(this);var parentRects=scrollableParent.getBoundingClientRect();var clientRects=this.getBoundingClientRect();if(scrollableParent!==d.body){smoothScroll.call(this,scrollableParent,scrollableParent.scrollLeft+clientRects.left-parentRects.left,scrollableParent.scrollTop+clientRects.top-parentRects.top);if(w.getComputedStyle(scrollableParent).position!=="fixed"){w.scrollBy({left:parentRects.left,top:parentRects.top,behavior:"smooth"})}}else{w.scrollBy({left:clientRects.left,top:clientRects.top,behavior:"smooth"})}}}if(true){module.exports={polyfill:polyfill}}else{}})()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);class Tabs{constructor(tabButtons,tabs){this.tabButtons=tabButtons;this.tabs=tabs;this.tabButtons.forEach((elem,i)=>{elem.addEventListener("click",()=>{this.closeAllTabs();this.tabs[i].classList.add("active");elem.classList.add("active")})})}closeAllTabs(){this.tabButtons.forEach(button=>{button.classList.remove("active")});this.tabs.forEach(tab=>{tab.classList.remove("active")})}}class popupFunc{constructor(popup,button){this.button=button;this.popup=popup;this.openPopupFunc=this.openPopup.bind(this);this.closePopupFunc=this.closePopup.bind(this);if(Array.isArray(this.button)){this.button.forEach(elem=>{elem.addEventListener("click",this.openPopupFunc)})}else{this.button.addEventListener("click",this.openPopupFunc)}this.popup.querySelector(".close").addEventListener("click",this.closePopupFunc);this.popup.parentNode.addEventListener("click",this.closePopupFunc)}openPopup(event){event.preventDefault();this.popup.classList.add("open");this.popup.parentNode.classList.add("open")}closePopup(event){if(!event.target.classList.contains("close")&&event.target.closest(".popup")!==null){event.stopPropagation()}else{this.popup.classList.remove("open");this.popup.parentNode.classList.remove("open")}}}var smoothscroll=__webpack_require__(0);var smoothscroll_default=__webpack_require__.n(smoothscroll);smoothscroll_default.a.polyfill();function iOS(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document}function SmoothVerticalScrolling(e,time,where){let eTop;if(iOS){eTop=e.offsetTop}else{eTop=e.getBoundingClientRect().top}window.scrollTo({top:eTop-50,behavior:"smooth"})}document.querySelectorAll("[data-href]").forEach(link=>{link.addEventListener("click",e=>{e.preventDefault();SmoothVerticalScrolling(document.querySelector(`${link.dataset.href}`),1500,"top")})});new Tabs(document.querySelectorAll(".tab-buttons .tab"),document.querySelectorAll(".tabs .tab"));if(document.querySelector(".how-we-do-it .image-block")&&window.screen.width>978){let imageBlock=document.querySelector(".how-we-do-it .image-block"),imageList=imageBlock.querySelector("ol"),canvas=imageBlock.querySelector("canvas"),widthStatic=1250,heightStatic=650,paddingString,widthMark;canvas.width=widthStatic;canvas.height=heightStatic;let step={0:"41",1024:"62",1366:"82"};for(let width in step){if(window.screen.width<=width){break}else{widthMark=step[width]}}imageBlock.querySelectorAll(".image-field").forEach((elem,index)=>{let round=document.createElement("span");round.classList.add("mark");imageList.appendChild(round);let markX=parseInt(elem.dataset.posX),markY=parseInt(elem.dataset.posY);elem.style.top=`calc(${markY*100/heightStatic}% + ${Math.round(widthMark*.78)}px)`;elem.style.left=`${markX*100/widthStatic}%`;round.style.top=`${markY*100/heightStatic}%`;round.style.left=`${markX*100/widthStatic}%`;let elemHeight=parseInt(window.getComputedStyle(elem).getPropertyValue("height"));elem.style.height="0";if(window.screen.width>1023){elem.style.padding=`0 15px 0 20px`}else{elem.style.padding=`0 15px`}round.addEventListener("click",()=>{document.querySelectorAll(".how-we-do-it .image-block .image-field").forEach(field=>{if(field!==elem){field.style.height="0";if(window.screen.width>1023){field.style.padding=`0 15px 0 20px`}else{field.style.padding=`0 15px`}}});document.querySelectorAll(".how-we-do-it .image-block .mark").forEach(mark=>{if(mark!==round){mark.classList.remove("active")}});if(parseInt(elem.style.height)===0){round.classList.add("active");elem.style.height=`${elemHeight}px`;if(window.screen.width>1023){elem.style.padding=`25px 15px 25px 20px`}else{elem.style.padding=`5px 15px`}}else{round.classList.remove("active");elem.style.height="0";elem.style.padding=`0 15px 0 20px`}})})}if(document.querySelector("header .burger")&&window.screen.width<860){document.querySelector("header .burger").addEventListener("click",function(){document.querySelector("header nav").classList.add("active");document.body.classList.add("hidden");if(window.screen.width<576){document.querySelector("header .social").classList.add("active")}});document.querySelectorAll("header nav a").forEach(link=>{link.addEventListener("click",()=>{document.querySelector("header nav").classList.remove("active");document.body.classList.remove("hidden");if(window.screen.width<576){document.querySelector("header .social").classList.remove("active")}})});document.querySelector("header nav .close").addEventListener("click",function(){document.querySelector("header nav").classList.remove("active");document.body.classList.remove("hidden");if(window.screen.width<576){document.querySelector("header .social").classList.remove("active")}})}if(document.querySelector("section.top-catalogs .slider-images")){let allImages=document.querySelectorAll("section.top-catalogs .slider-images img");let siema=new Siema({selector:"section.top-catalogs .slider-images",duration:200,easing:"ease-out",perPage:1,startIndex:0,draggable:false,multipleDrag:false,threshold:20,loop:true,rtl:false,onInit:function(){let dotLength=this.innerElements.length-this.perPage;for(let i=0;i<dotLength;i++){let dot=document.createElement("div");dot.classList.add("dot");this.selector.closest("section.top-catalogs").querySelector(".scroll").appendChild(dot)}allImages[this.currentSlide].classList.remove("active");setTimeout(()=>{this.next();setTimeout(()=>{allImages[this.currentSlide].classList.add("active")},300)},300);setInterval(()=>{allImages[this.currentSlide].classList.remove("active");setTimeout(()=>{this.next();setTimeout(()=>{allImages[this.currentSlide].classList.add("active")},300)},300)},10300);this.selector.closest("section.top-catalogs").querySelector(".btns .prev").addEventListener("click",()=>{allImages[this.currentSlide].classList.remove("active");setTimeout(()=>{siema.prev();setTimeout(()=>{allImages[this.currentSlide].classList.add("active")},300)},300)});this.selector.closest("section.top-catalogs").querySelector(".btns .next").addEventListener("click",()=>{allImages[this.currentSlide].classList.remove("active");setTimeout(()=>{siema.next();setTimeout(()=>{allImages[this.currentSlide].classList.add("active")},300)},300)})},onChange:function(){this.selector.parentNode.querySelectorAll(".scroll .dot").forEach(elem=>elem.classList.remove("active"));for(let i=0;i<this.currentSlide;i++){this.selector.parentNode.querySelectorAll(".scroll .dot")[i].classList.add("active")}}})}if(document.querySelector(".wrapper .popup")){new popupFunc(document.querySelector(".wrapper .popup"),[...document.querySelectorAll("[data-popup]")])}if(document.querySelector("section.blog")){let maxHeight=document.querySelector("section.blog .grid").offsetHeight;let heightOfBlock=document.querySelector("section.blog .elem").offsetHeight;let grid=document.querySelector("section.blog .grid");grid.style.maxHeight=`${heightOfBlock}px`;document.querySelector("section.blog .btn").addEventListener("click",e=>{e.preventDefault();grid.style.maxHeight=`${maxHeight}px`;grid.style.paddingBottom=`30px`;document.querySelector("section.blog .btn").style.display="none"})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
